#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require("dotenv").config();

/**
 * Module dependencies.
 */

var app = require("../app").app;
const jwt = require("jsonwebtoken");
const cookie = require("cookie");
const User = require("../models/User");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = require("../app").server;

/**
 * Listen on provided port, on all network interfaces.
 */

 const io = require("socket.io")(server, {
  cors: {
    origin: "http://localhost:3000",
    credentials: true,
  }
});

io.use((socket, next) => {
  const token = cookie.parse(socket.handshake.headers?.cookie || "").token;

  if (token) {
    jwt.verify(token, process.env.JWT_SECRET, async(err, decoded) => {
      if (err) {
        next(new Error("Invalid Token"));
      } else {
        const user = await User.findById(decoded.id);
        if (!user) {
          next(new Error("User not found!"));
        }
        next();
      }
    })
  } else {
    next(new Error("User Authentication Failed!"));
  }
}).on("connection", (socket) => {
  console.log('User has connected!');
  
  socket.on("disconnect", () => {
    console.log("User has disconnected!")
  });
})


server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log(`Listening on ${bind}`.red.underline.bold);
}
